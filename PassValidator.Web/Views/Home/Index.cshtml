@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PKPassValidator - validate your pkpass files quickly and easily</title>
    <meta name="description" content="Validate your pkpass file. This validator will check your packages for correctness and help you diagnose issues." />
    <meta name="keywords" content="apple wallet pkpass passbook passkit" />
    <meta name="author" content="Tomas McGuinness" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.2/semantic.min.css" />
    <style type="text/css">
        .up {
            color: green;
        }

        .down {
            color: red;
        }

        .bmc-button img {
            width: 27px !important;
            margin-bottom: 1px !important;
            box-shadow: none !important;
            border: none !important;
            vertical-align: middle !important;
        }

        .bmc-button {
            line-height: 36px !important;
            height: 37px !important;
            text-decoration: none !important;
            display: inline-flex !important;
            color: #FFFFFF !important;
            background-color: #FF813F !important;
            border-radius: 3px !important;
            border: 1px solid transparent !important;
            padding: 1px 9px !important;
            font-size: 23px !important;
            letter-spacing: 0.6px !important;
            box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;
            -webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
            margin: 0 auto !important;
            font-family: 'Cookie', cursive !important;
            -webkit-box-sizing: border-box !important;
            box-sizing: border-box !important;
            -o-transition: 0.3s all linear !important;
            -webkit-transition: 0.3s all linear !important;
            -moz-transition: 0.3s all linear !important;
            -ms-transition: 0.3s all linear !important;
            transition: 0.3s all linear !important;
        }

            .bmc-button:hover, .bmc-button:active, .bmc-button:focus {
                -webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
                text-decoration: none !important;
                box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
                opacity: 0.85 !important;
                color: #FFFFFF !important;
            }
    </style>
</head>
<body class="ui container">
    <h1 style="margin-top: 50px;">Pkpass Validator</h1>
    <p>
        If you're having problems with your PKPass files, just upload your pkpass file and it will be validated. This project is on Github and you can find the source code
        at <a href="https://github.com/tomasmcguinness/pkpassvalidator">https://github.com/tomasmcguinness/pkpassvalidator</a>.
    </p>
    <h3>What does it do?</h3>
    <p>
        Your file is uploaded and unzipped into memory. Each of the files is examined and checked to ensure it meets Apple's requirements. At present, the following things will be checked:
        <ul>
            <li>Manifest.json, pass.json, signature and icon.png files are present</li>
            <li>The required standard keys are present</li>
            <li>The Associated App keys are checked if present</li>
            <li>Your pass is signed by Apple and the signature is valid</li>
            <li>Your PassTypeIdentifier and TeamIdentifier in your pass.json matches your certificate</li>
            <li>The icon files are present in the bundle</li>
            <li>The update keys are validated if present</li>
        </ul>
    </p>
    <p>
        Your file is <b>never</b> saved and exists in memory long enough to validate.
    </p>
    <p>
        <input id="inputFile" type="file" accept=".pkpass" name="passFile" />
    </p>
    <p>
        <button class="ui primary button" type="button" data-bind="click: submitForValidation, css: { loading: isValidating }">Validate</button>
    </p>
    <div id="results" data-bind="visible: isShowingResults" style="display:none;">
        <h2>Validation Results:</h2>
        <div data-bind="visible: processedSuccessfully" style="display:none;">
            <h3>File Structure</h3>
            <ul>
                <li><i data-bind="css: getStyle(hasManifest())"></i>Has manifest.json file</li>
                <li><i data-bind="css: getStyle(hasPass())"></i>Has pass.json</li>
                <li><i data-bind="css: getStyle(hasSignature())"></i>Has signature file</li>
                <li><i data-bind="css: getStyle(hasIcon1x())"></i>Has icon.png file</li>
                <li><i data-bind="css: getStyle(hasIcon2x())"></i>Has icon@2x.png file</li>
                <li><i data-bind="css: getStyle(hasIcon3x())"></i>Has icon@3x.png file</li>
            </ul>

            <h3>Standard Keys</h3>
            <ul>
                <li><i data-bind="css: getStyle(hasDescription())"></i>Has description</li>
                <li><i data-bind="css: getStyle(hasFormatVersion())"></i>Has formatVersion with value of 1</li>
                <li><i data-bind="css: getStyle(hasOrganizationName())"></i>Has organizationName</li>
                <li><i data-bind="css: getStyle(hasPassTypeIdentifier())"></i>Has passTypeIdentifier</li>
                <li><i data-bind="css: getStyle(hasSerialNumber())"></i>Has serialNumber</li>
                <li><i data-bind="css: getStyle(hasTeamIdentifier())"></i>Has teamIdentifier</li>
            </ul>

            <div data-bind="visible: hasAssociatedStoreIdentifiers() || hasAppLaunchUrl()">
                <h3>Associated App Keys</h3>
                <ul>
                    <li><i data-bind="css: getStyle(hasAppLaunchUrl())"></i>Has appLaunchUrl</li>
                    <li><i data-bind="css: getStyle(hasAssociatedStoreIdentifiers())"></i>Has associatedStoreIdentifiers</li>

                    <li data-bind="visible: hasAppLaunchUrl">
                        <i data-bind="css: getStyle(hasAssociatedStoreIdentifiers())"></i>The appLaunchUrl key requires associatedStoreIdentifiers key
                    </li>
                </ul>
            </div>

            <div data-bind="visible: hasWebServiceUrl() || hasAuthenticationToken()">
                <h3>Updates</h3>
                <ul>
                    <li><i data-bind="css: getStyle(hasWebServiceUrl())"></i>Includes WebServiceUrl</li>
                    <li><i data-bind="css: getStyle(webServiceUrlIsHttps())"></i>WebServiceUrl is HTTPS</li>
                    <li><i data-bind="css: getStyle(hasAuthenticationToken())"></i>Includes AuthenticationToken</li>
                    <li data-bind="visible: authenticationTokenRequiresWebServiceUrl"><i class="thumbs down outline icon"></i>AuthenticationToken present but no WebServiceUrl found</lidata-bind="visible:>
                    <li data-bind="visible: webServiceUrlRequiresAuthenticationToken"><i class="thumbs down outline icon" ></i>WebServiceUrl requires an AuthenticationToken</lidata-bind="visible:>
                </ul>
            </div>

            <h3>Signature</h3>
            <ul>
                <li><i data-bind="css: getStyle(signedByApple())"></i>Signed by Apple</li>
                <li><i data-bind="css: getStyle(!hasSignatureExpired())"></i>Signature in date (<span data-bind="text: signatureExpirationDate"></span>)</li>
                <li><i data-bind="css: getStyle(hasMatchingPassTypeIdentifier())"></i>PassTypeIdentifier in signature matches value in pass.json</li>
                <li><i data-bind="css: getStyle(hasMatchingTeamIdentifier())"></i>TeamIdentifier in signature matches value in pass.json</li>
            </ul>
            <h3>WWDR Certificate</h3>
            <ul>
                <li><i data-bind="css: getStyle(wwdrCertificateSubjectMatches())"></i>WWDR Certificate Subject</li>
                <li><i data-bind="css: getStyle(!wwdrCertificateExpired())"></i>WWDR Certificate in date</li>
            </ul>
            <h3>PassKit Certificate</h3>
            <ul>
                <li data-bind="visible: !passKitCertificateNameCorrect()"><i class="thumbs down outline icon"></i>PassKit Certificate has an incorrect value - <a href="https://github.com/tomasmcguinness/pkpassvalidator/wiki/PassKit-certificate-contains-an-incorrect-value" target="_blank">Read more here</a></li>
                <li><i data-bind="css: getStyle(!passKitCertificateExpired())"></i>PassKit Certificate in date</li>
            </ul>
        </div>
        <div class="ui negative message" data-bind="visible: !processedSuccessfully()" style="display: none;">
            Failed to process the pkpass file.
        </div>
    </div>
    <hr />
    <h2>Supporting this project</h2>
    <p>
        If pkpass validator has saved you time, please consider buying me a coffee using the button below:
    </p>
    <p>
        <link href="https://fonts.googleapis.com/css?family=Cookie" rel="stylesheet"><a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/fMKJ2NnQ3"><img src="https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt="Buy me a coffee"><span style="margin-left:5px">Buy me a coffee</span></a>
    </p>
    <h2>Release History</h2>
    <ul>
        <li><a class="ui small blue label">18th November 2019</a> - Fixed bug in detection of missing icon files</li>
        <li><a class="ui small blue label">11th November 2019</a> - Update key (auth token and webserviceUrl) validation</li>
        <li><a class="ui small blue label">5th November 2019</a> - Improved Signature validation</li>
        <li><a class="ui small blue label">4th July 2019</a> - Added custom domain pkpassvalidator.com</li>
        <li><a class="ui small blue label">2nd July 2019</a> - Icon files checked. Standard and Associated App keys checked</li>
        <li><a class="ui small blue label">2nd October 2018</a> - Updating validation to handle different order of files</li>
        <li><a class="ui small blue label">14th August 2018</a> - Added check to ensure signature is in date</li>
        <li><a class="ui small blue label">25th July 2018</a> - First release with basic siganture checks</li>
    </ul>
    <h2>Checks that need to be added</h2>
    <ul>
        <li>Image sizes are correct</li>
        <li>Ensure webservice url is valid and https</li>
        <li>Ensure dates are valid ISO 8601</li>
    </ul>
    <hr />
    <div>
        Built by Tomas McGuinness. Last updated in July, 2019 - <a href="mailto:tomas@coldbear.co.uk">tomas@coldbear.co.uk</a> - <a href="https://www.twitter.com/tomasmcguinness">@@tomasmcguinness</a> - <a href="https://wwww.tomasmcguinness.com">tomasmcguinness.com</a>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.2/semantic.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
    <script type="text/javascript">

        function Model() {
            var self = this;

            self.isValidating = ko.observable(false);
            self.isShowingResults = ko.observable(false);
            self.processedSuccessfully = ko.observable(false);

            self.submitForValidation = function () {

                var fileInput = document.getElementById('inputFile');

                if (fileInput.files.length == 0) {
                    alert("Please select a pkpass file");
                    return;
                }

                self.isValidating(true);

                var file = fileInput.files[0];

                var formData = new FormData();

                formData.append('file', file);

                var xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {

                        self.isValidating(false);
                        self.isShowingResults(true);

                        if (xhr.status === 200) {

                            console.log(xhr.responseText);

                            var jsonResponse = JSON.parse(xhr.responseText);

                            self.processedSuccessfully(true);

                            self.hasManifest(jsonResponse.hasManifest);
                            self.hasPass(jsonResponse.hasPass);
                            self.hasSignature(jsonResponse.hasSignature);
                            self.hasIcon1x(jsonResponse.hasIcon1x);
                            self.hasIcon2x(jsonResponse.hasIcon2x);
                            self.hasIcon3x(jsonResponse.hasIcon3x);

                            self.hasPassTypeIdentifier(jsonResponse.hasPassTypeIdentifier);
                            self.hasTeamIdentifier(jsonResponse.hasTeamIdentifier);
                            self.hasDescription(jsonResponse.hasDescription);
                            self.hasFormatVersion(jsonResponse.hasFormatVersion);
                            self.hasSerialNumber(jsonResponse.hasSerialNumber);
                            self.hasSerialNumberOfCorrectLength(jsonResponse.hasSerialNumberOfCorrectLength);
                            self.hasOrganizationName(jsonResponse.hasOrganizationName);

                            self.hasAppLaunchUrl(jsonResponse.hasAppLaunchUrl);
                            self.hasAssociatedStoreIdentifiers(jsonResponse.hasAssociatedStoreIdentifiers);

                            self.signedByApple(jsonResponse.signedByApple);
                            self.hasMatchingPassTypeIdentifier(jsonResponse.passTypeIdentifierMatches);
                            self.hasMatchingTeamIdentifier(jsonResponse.teamIdentifierMatches);
                            self.signatureExpirationDate(jsonResponse.signatureExpirationDate);
                            self.hasSignatureExpired(jsonResponse.hasSignatureExpired);
                            self.passKitCertificateFound(jsonResponse.passKitCertificateFound);
                            self.wwdrCertificateFound(jsonResponse.wwdrCertificateFound);

                            self.wwdrCertificateExpired(jsonResponse.wwdrCertificateExpired);
                            self.wwdrCertificateSubjectMatches(jsonResponse.wwdrCertificateSubjectMatches);

                            self.passKitCertificateNameCorrect(jsonResponse.passKitCertificateNameCorrect);
                            self.passKitCertificateExpired(jsonResponse.passKitCertificateExpired);

                            self.hasAuthenticationToken(jsonResponse.hasAuthenticationToken);
                            self.hasWebServiceUrl(jsonResponse.hasWebServiceUrl);
                            self.webServiceUrlIsHttps(jsonResponse.webServiceUrlIsHttps);
                            self.authenticationTokenRequiresWebServiceUrl(jsonResponse.authenticationTokenRequiresWebServiceUrl);
                            self.webServiceUrlRequiresAuthenticationToken(jsonResponse.webServiceUrlRequiresAuthenticationToken);

                        } else {
                            self.processedSuccessfully(false);
                        }
                    }
                }

                xhr.open('POST', '/api/validation', true);
                xhr.send(formData);
            };

            self.getStyle = function (value) {
                return value ? "thumbs up outline icon" : "thumbs down outline icon";
            }

            self.hasManifest = ko.observable(false);
            self.hasPass = ko.observable(false);
            self.hasSignature = ko.observable(false);
            self.hasIcon1x = ko.observable(false);
            self.hasIcon2x = ko.observable(false);
            self.hasIcon3x = ko.observable(false);

            self.hasPassTypeIdentifier = ko.observable(false);
            self.hasTeamIdentifier = ko.observable(false);
            self.hasDescription = ko.observable(false);
            self.hasFormatVersion = ko.observable(false);
            self.hasSerialNumber = ko.observable(false);
            self.hasSerialNumberOfCorrectLength = ko.observable(false);
            self.hasOrganizationName = ko.observable(false);

            self.hasAppLaunchUrl = ko.observable(false);
            self.hasAssociatedStoreIdentifiers = ko.observable(false);

            self.hasMatchingPassTypeIdentifier = ko.observable(false);
            self.hasMatchingTeamIdentifier = ko.observable(false);
            self.signedByApple = ko.observable(false);
            self.signatureExpirationDate = ko.observable(null);
            self.hasSignatureExpired = ko.observable(false);

            self.passKitCertificateFound = ko.observable(false);
            self.wwdrCertificateFound = ko.observable(false);

            self.passKitCertificateNameCorrect = ko.observable(false);
            self.passKitCertificateExpired = ko.observable(false);

            self.wwdrCertificateExpired = ko.observable(false);
            self.wwdrCertificateSubjectMatches = ko.observable(false);

            self.hasAuthenticationToken = ko.observable(false);
            self.authenticationTokenIsCorrectLength = ko.observable(false);
            self.hasWebServiceUrl = ko.observable(false);
            self.webServiceUrlIsHttps = ko.observable(false);
            self.authenticationTokenRequiresWebServiceUrl = ko.observable(false);
            self.webServiceUrlRequiresAuthenticationToken = ko.observable(false);
        }

        var viewModel = new Model();
        ko.applyBindings(viewModel);
    </script>
</body>
</html>
