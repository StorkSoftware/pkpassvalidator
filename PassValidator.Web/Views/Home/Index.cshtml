
@{
    Layout = null;
}



<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PKPassValidator - validate your pkpass files quickly and easily</title>
    <meta name="description" content="Validate your pkpass file. This validator will check your packages for correctness and help you diagnose issues." />
    <meta name="keywords" content="apple wallet pkpass passbook passkit" />
    <meta name="author" content="Tomas McGuinness" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.2/semantic.min.css" />
    <style type="text/css">
        .up {
            color: green;
        }

        .down {
            color: red;
        }

        .bmc-button img {
            width: 27px !important;
            margin-bottom: 1px !important;
            box-shadow: none !important;
            border: none !important;
            vertical-align: middle !important;
        }

        .bmc-button {
            line-height: 36px !important;
            height: 37px !important;
            text-decoration: none !important;
            display: inline-flex !important;
            color: #FFFFFF !important;
            background-color: #FF813F !important;
            border-radius: 3px !important;
            border: 1px solid transparent !important;
            padding: 1px 9px !important;
            font-size: 23px !important;
            letter-spacing: 0.6px !important;
            box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;
            -webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
            margin: 0 auto !important;
            font-family: 'Cookie', cursive !important;
            -webkit-box-sizing: border-box !important;
            box-sizing: border-box !important;
            -o-transition: 0.3s all linear !important;
            -webkit-transition: 0.3s all linear !important;
            -moz-transition: 0.3s all linear !important;
            -ms-transition: 0.3s all linear !important;
            transition: 0.3s all linear !important;
        }

            .bmc-button:hover, .bmc-button:active, .bmc-button:focus {
                -webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
                text-decoration: none !important;
                box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;
                opacity: 0.85 !important;
                color: #FFFFFF !important;
            }
    </style>
</head>
<body class="ui container">
    <h1 style="margin-top: 50px;">Pkpass Validator</h1>
    <p>
        If you're having problems with your PKPass files, just upload your pkpass file and it will be validated. This project is on Github and you can find the source code
        at <a href="https://github.com/tomasmcguinness/pkpassvalidator">https://github.com/tomasmcguinness/pkpassvalidator</a>.
    </p>
    <h3>What does it do?</h3>
    <p>
        Your file is uploaded and unzipped into memory. Each of the files is examied and checked to ensure it meets Apple's requirements. At present, the following things will be checked:
        <ul>
            <li>Manifest.json, pass.json and signature file are present</li>
            <li>Your PassTypeIdentifier and TeamIdentifier in your pass.json matches your certificate</li>
            <li>Your pass is signed by Apple and the signature is valid</li>
        </ul>
    </p>
    <p>
        Your file is never saved and will exist in memory.
    </p>
    <p>
        <input id="inputFile" type="file" accept=".pkpass" name="passFile" />
    </p>
    <p>
        <button class="ui primary button" type="button" data-bind="click: submitForValidation, css: { loading: isValidating }">Validate</button>
    </p>
    <div id="results" data-bind="visible: isShowingResults" style="display:none;">
        <div data-bind="visible: processedSuccessfully" style="display:none;">
            <h3>File Structure</h3>
            <ul>
                <li><i data-bind="css: getStyle(this.hasManifest())"></i>Has manifest.json file</li>
                <li><i data-bind="css: passStyle"></i>Has pass.json</li>
                <li><i data-bind="css: signatureStyle"></i>Has signature file</li>
                <li><i data-bind="css: icon1xStyle"></i>Has icon.png file</li>
                <li><i data-bind="css: icon2xStyle"></i>Has icon@2x.png file</li>
                <li><i data-bind="css: icon3xStyle"></i>Has icon@3x.png file</li>
            </ul>

            <h3>Standard Keys</h3>
            <ul>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
            </ul>

            <h3>Signature</h3>
            <ul>
                <li><i data-bind="css: signedByAppleStyle"></i>Signed by Apple</li>
                <li><i data-bind="css: signatureExpirationDateStyle"></i>Signature Expires: <span data-bind="text: signatureExpirationDate"></span></li>
                <li><i data-bind="css: passTypeIdentifierStyle"></i>PassTypeIdentifier in signature matches value in pass.json</li>
                <li><i data-bind="css: teamIdentifierStyle"></i>TeamIdentifier in signature matches value in pass.json</li>
            </ul>
        </div>
        <div class="ui negative message" data-bind="visible: !processedSuccessfully()" style="display: none;">
            Failed to process the pkpass file.
        </div>
    </div>
    <h2>Supporting this project</h2>
    <p>
        If you find pkpass validator useful, please consider buying me a coffee using the button below:
    </p>
    <p>
        <link href="https://fonts.googleapis.com/css?family=Cookie" rel="stylesheet"><a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/fMKJ2NnQ3"><img src="https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg" alt="Buy me a coffee"><span style="margin-left:5px">Buy me a coffee</span></a>
    </p>
    <h2>Checks to be added</h2>
    <ul>
        <li>Ensure webservice url is valid and https</li>
        <li>Ensure dates are valid ISO 8601</li>
    </ul>
    <h2>Release History</h2>
    <ul>
        <li><a class="ui small blue label">2nd October 2018</a> - Updating validation to handle different order of files</li>
        <li><a class="ui small blue label">14th August 2018</a> - Added check to ensure signature is in date</li>
        <li><a class="ui small blue label">25th July 2018</a> - First release with basic siganture checks</li>
    </ul>
    <hr />
    <div>
        Built by Tomas McGuinness, 2018 - <a href="mailto:tomas@coldbear.co.uk">tomas@coldbear.co.uk</a> - <a href="https://www.twitter.com/tomasmcguinness">@@tomasmcguinness</a> - <a href="https://wwww.tomasmcguinness.com">tomasmcguinness.com</a>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.2/semantic.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
    <script type="text/javascript">

        function Model() {
            var self = this;

            self.isValidating = ko.observable(false);
            self.isShowingResults = ko.observable(false);
            self.processedSuccessfully = ko.observable(false);

            self.submitForValidation = function () {


                var fileInput = document.getElementById('inputFile');

                if (fileInput.files.length == 0) {
                    alert("Please select a pkpass file");
                    return;
                }

                self.isValidating(true);

                var file = fileInput.files[0];

                var formData = new FormData();

                formData.append('file', file);

                var xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {

                        self.isValidating(false);
                        self.isShowingResults(true);

                        if (xhr.status === 200) {

                            console.log(xhr.responseText);

                            var jsonResponse = JSON.parse(xhr.responseText);

                            self.processedSuccessfully(true);
                            self.hasManifest(jsonResponse.hasManifest);
                            self.hasPass(jsonResponse.hasPass);
                            self.hasIcon1x(jsonResponse.HasIcon1x);
                            self.hasIcon2x(jsonResponse.HasIcon2x);
                            self.hasIcon3x(jsonResponse.HasIcon3x);

                            self.hasPassTypeIdentifier(result.HasPassTypeIdentifier);
                            self.hasTeamIdentifier(result.HasTeamIdentifier);
                            self.hasDescription(result.HasDescription);
                            self.hasFormatVersion(result.HasFormatVersion);
                            self.hasSerialNumber(result.HasSerialNumber);
                            self.hasOrganizationName(result.HasOrganizationName); 

                            self.signedByApple(jsonResponse.signedByApple);
                            self.hasMatchingPassTypeIdentifier(jsonResponse.passTypeIdentifierMatches);
                            self.hasMatchingTeamIdentifier(jsonResponse.teamIdentifierMatches);
                            self.signatureExpirationDate(jsonResponse.signatureExpirationDate);
                            self.hasSignatureExpired(jsonResponse.hasSignatureExpired);

                        } else {
                            self.processedSuccessfully(false);
                        }
                    }
                }

                xhr.open('POST', '/api/validation', true);
                xhr.send(formData);
            };

            self.getStyle = function (value) {
                return value ? "thumbs up outline icon" : "thumbs down outline icon";
            }

            self.hasManifest = ko.observable(false);
            self.manifestStyle = ko.computed(function () {
                return self.getStyle(self.hasManifest());
            });

            self.hasPass = ko.observable(false);
            self.passStyle = ko.computed(function () {
                return self.getStyle(self.hasPass());
            });

            self.hasSignature = ko.observable(false);
            self.signatureStyle = ko.computed(function () {
                return self.getStyle(self.hasSignature());
            });

            self.hasIcon1x = ko.observable(false);
            self.icon1xStyle = ko.computed(function () {
                return self.getStyle(self.hasIcon1x());
            });

            self.hasIcon2x = ko.observable(false);
            self.icon2xStyle = ko.computed(function () {
                return self.getStyle(self.hasIcon2x());
            });

            self.hasIcon3x = ko.observable(false);
            self.icon3xStyle = ko.computed(function () {
                return self.getStyle(self.hasIcon3x());
            });

            self.hasPassTypeIdentifier = ko.observable(false);
            self.hasTeamIdentifier = ko.observable(false);
            self.hasDescription = ko.observable(false);
            self.hasFormatVersion = ko.observable(false);
            self.hasSerialNumber = ko.observable(false);
            self.hasOrganizationName = ko.observable(false);

            self.hasMatchingPassTypeIdentifier = ko.observable(false);
            self.passTypeIdentifierStyle = ko.computed(function () {
                return self.getStyle(self.hasMatchingPassTypeIdentifier());
            });

            self.hasMatchingTeamIdentifier = ko.observable(false);
            self.teamIdentifierStyle = ko.computed(function () {
                return self.getStyle(self.hasMatchingTeamIdentifier());
            });

            self.signedByApple = ko.observable(false);
            self.signedByAppleStyle = ko.computed(function () {
                return self.getStyle(self.signedByApple());
            });

            self.signatureExpirationDate = ko.observable(null);
            self.hasSignatureExpired = ko.observable(false);
            self.signatureExpirationDateStyle = ko.computed(function () {
                return self.getStyle(!self.hasSignatureExpired());
            });
        }

        var viewModel = new Model();
        ko.applyBindings(viewModel);
    </script>
</body>
</html>
